// Generated by CoffeeScript 1.7.1
(function() {
  var LocalStrategy, User, app, auth, bodyParser, cookieParser, cors, dbpath, express, favicon, flash, flowers, logger, mongoose, passport, path, personSchema, routes, session, user, users;

  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  flash = require('connect-flash');

  routes = require('./routes/index');

  users = require('./routes/users');

  flowers = require('./routes/flowers');

  auth = require('./routes/auth');

  passport = require('passport');

  LocalStrategy = require('passport-local').Strategy;

  session = require('express-session');

  app = express();

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  app.use(require('less-middleware')(path.join(__dirname, 'public')));

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use(express["static"](path.join(__dirname, 'dist')));

  app.use(session({
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: false
  }));

  app.use(flash());

  app.use(passport.initialize());

  app.use(passport.session());

  app.use('/', routes);

  app.use('/users', users);

  app.use('/flowers', flowers);

  app.use('/login', auth);

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    return next(err);
  });

  if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      return res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    return res.render('error', {
      message: err.message,
      error: {}
    });
  });

  mongoose = require("mongoose");

  cors = require("cors");

  dbpath = process.env['MONGOLAB_URI'] || 'mongodb://localhost/simple';

  mongoose.connect(dbpath);

  personSchema = {
    username: String,
    password: String,
    email: String,
    cellphone: String
  };

  User = mongoose.model('User', personSchema, 'users');

  user = new User({
    username: 'suoqin',
    password: '12345',
    email: 'abc@a.com',
    cellphone: '1234567891'
  });

  user.save();

  passport.use(new LocalStrategy(function(username, password, done) {
    return User.findOne({
      username: username
    }, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, {
          message: 'Incorrect username.'
        });
      }
      if (user.password !== password) {
        return done(null, false, {
          message: 'Incorrect password.'
        });
      }
      return done(null, user);
    });
  }));

  passport.serializeUser(function(user, done) {
    return done(null, user);
  });

  passport.deserializeUser(function(user, done) {
    return done(null, user);
  });

  module.exports = app;

}).call(this);

//# sourceMappingURL=app.map
